#include "../lib/crawler.h"


using namespace std;

Crawler::Crawler(string config_file) {


	ifstream config(config_file.c_str());

	if(config.fail())
		return;

	while(!config.fail()) {
		string line;
		getline(config, line);
		if(!config.fail()) {
			if(!line.empty() && line[0] != '#') {
				if(line.substr(0, 10) == "INDEX_FILE") {
					bool started = false;
					for(unsigned int i = 10; i<line.length(); i++) {
						if(started) {
							if(line[i] != ' ') {
								index_file += line[i];
							}
						}
						else if(line[i] == '=') {
							started = true;
						}
					}
				}
				if(line.substr(0, 11) == "OUTPUT_FILE") {
					bool started = false;
					for(unsigned int i = 11; i<line.length(); i++) {
						if(started) {
							if(line[i] != ' ') {
								output_file += line[i];
							}
						}
						else if(line[i] == '=') {
							started = true;
						}
					}
				}
			}
		}
	}
}

Crawler::Crawler() {
	string config_file;
	config_file = "config.txt";
	ifstream config(config_file.c_str());

	if(config.fail())
		return;

	while(!config.fail()) {
		string line;
		getline(config, line);
		if(!config.fail()) {
			if(!line.empty() && line[0] != '#') {
				if(line.substr(0, 10) == "INDEX_FILE") {
					bool started = false;
					for(unsigned int i = 10; i<line.length(); i++) {
						if(started) {
							if(line[i] != ' ') {
								index_file += line[i];
							}
						}
						else if(line[i] == '=') {
							started = true;
						}
					}
				}
				if(line.substr(0, 11) == "OUTPUT_FILE") {
					bool started = false;
					for(unsigned int i = 11; i<line.length(); i++) {
						if(started) {
							if(line[i] != ' ') {
								output_file += line[i];
							}
						}
						else if(line[i] == '=') {
							started = true;
						}
					}
				}
			}
		}
	}
}

Crawler::~Crawler() {
	for(map<string, WebPage*>::iterator it = index.begin(); it != index.end(); ++it) {
    	WebPage* temp = it->second;
    	delete temp;

  }
}

void Crawler::crawl(PageParser* parser) {
	ifstream indexFile(index_file.c_str());
	ofstream output(output_file.c_str());
	if(indexFile.fail())
		return;

	while(!indexFile.fail()) {
		string line;
		getline(indexFile, line);
		if(!line.empty()) {
			WebPage* current = new WebPage(line);
			try{
				current->parse(parser);
				index[line] = current;
				crawl_helper(current, parser, output);
			}
			catch(...){
				delete current;
			}
		}

	}

}

void Crawler::crawl_helper(WebPage* current, PageParser* parser, ofstream& output) {
 	output << current->filename() << endl;

 	vector<string> outgoing = current->outgoing_links_vector();
 	for(unsigned int i = 0; i < outgoing.length(); ++i) {
 		if(index.count(outgoing[i]) == 0) {

 			WebPage* child = new WebPage(outgoing[i]);
			try{
				child->parse(parser);
				index[outgoing[i]] = child;
				crawl_helper(child, parser, output);
			}
			catch (...){
				delete child;
			}
 		}
 	}
}

string Crawler::get_output_file() {
	return output_file;
}